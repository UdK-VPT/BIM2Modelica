<%
## Data of the multi-zone building model
import math
for filename in d:
    data = d[filename]['_buildingData']
%>\
% if generatorCfg['MODELICA_LIBPATHS'].getboolean('libPath'):
within ${generatorCfg['MODELICA_LIBPATHS'].get('ModelicaLibPath')};
% else:
within;
% endif
/**************************************************************************************/
// Automatically generated thermal building model by
// CoTeTo code generator IFC_MultiZoneBuildings_Modelica on ${systemCfg['timestamp']()}
//
// Used MODELICA_CODE_SWITCHES for code generation:
// surTemOut = on: sets surface temperatures as an output of the building model
// used value: ${generatorCfg['MODELICA_CODE_SWITCHES'].get('surTemOut')}
//
// intHeaSou = on: sets internal heat sources for all thermal zones:
// used value: ${generatorCfg['MODELICA_CODE_SWITCHES'].get('intHeaSou')}
//
// useAirPaths = on: uses air paths of windows and doors to calculate ventilation rates:
// used value: ${generatorCfg['MODELICA_CODE_SWITCHES'].get('useAirPaths')}
//
// prescribedAirchange = on: defines ventilation rates for each thermal zone as
// a prescribed air change rate:
// used value: ${generatorCfg['MODELICA_CODE_SWITCHES'].get('prescribedAirchange')}
//
// calcIdealLoads = on: calculates the ideal heating and cooling loads for each
// thermal zone for prescribed set temperatures:
// used value: ${generatorCfg['MODELICA_CODE_SWITCHES'].get('calcIdealLoads')}
/***************************************************************************************/
model ${data['buildingSystem'].name}_BuildingsLib
  "Model of a building with its climate environment"
  extends Modelica.Icons.Example;
  package MediumA = Buildings.Media.Air "Medium model";

  parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Insulation100Concrete200 matLayExt
    "Construction material for exterior walls"
    annotation (Placement(transformation(extent={{-60,140},{-40,160}})));

  parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Brick120 matLayPar
    "Construction material for partition walls"
    annotation (Placement(transformation(extent={{-20,140},{0,160}})));

  parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic matLayRoo(
    material={
      Buildings.HeatTransfer.Data.Solids.InsulationBoard(x=0.2),
      Buildings.HeatTransfer.Data.Solids.Concrete(x=0.2)},
      final nLay=2)
    "Construction material for roof"
    annotation (Placement(transformation(extent={{20,140},{40,160}})));

  parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic matLayDoo(
    material={
      Buildings.HeatTransfer.Data.Solids.Plywood(x=0.05)},
      final nLay=1)
    "Construction material for door"
    annotation (Placement(transformation(extent={{-100,140},{-80,160}})));

  parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic matLayFlo(
    material={
      Buildings.HeatTransfer.Data.Solids.Concrete(x=0.2),
      Buildings.HeatTransfer.Data.Solids.InsulationBoard(x=0.15),
      Buildings.HeatTransfer.Data.Solids.Concrete(x=0.05)},
      final nLay=3)
    "Construction material for floor"
    annotation (Placement(transformation(extent={{60,140},{80,160}})));

  parameter Buildings.HeatTransfer.Data.GlazingSystems.DoubleClearAir13Clear glaSys(
    UFra=2,
    shade=Buildings.HeatTransfer.Data.Shades.Gray(),
    haveInteriorShade=false,
    haveExteriorShade=false)
    "Data record for the glazing system"
    annotation (Placement(transformation(extent={{100,140},{120,160}})));
<%
ConSurBouDoo = {}
ConSurBou = {}
%>
  // Thermal zones
  % for zone in data['zones']:
  <%
  ConSurBouDoo[zone.name] = []
  ConSurBou[zone.name] = []
  ConExt = []
  ConExtDoo = []
  ConExtWin = []
  ConPar = []
  ConBou = []
  SurBouDoo = []
  SurBou = []
  for ele in data['elementsDoor']:
    if ele.memberOfZone[0] == zone.name and ele.memberOfZone[1] == "AMB":
      ConExtDoo.append(ele)
    elif (ele.memberOfZone[0] == zone.name and ele.memberOfZone[1] != "AMB") or (ele.memberOfZone[1] == zone.name and ele.memberOfZone[0] != "AMB"):
      SurBouDoo.append(ele)
      if ele.memberOfZone[0] == zone.name:
        port = 'a'
      else:
        port = 'b'
      ConSurBouDoo[zone.name].append((ele.name,port))
  for ele in data['elementsOpaque']:
    if ele.memberOfZone[0] == zone.name and ele.memberOfZone[1] == "AMB" and len(ele.includedWindows) == 0:
      ConExt.append(ele)
    elif ele.memberOfZone[0] == zone.name and ele.memberOfZone[1] == "AMB" and len(ele.includedWindows) > 0:
      ConExtWin.append(ele)
    elif ele.memberOfZone[0] == zone.name and ele.memberOfZone[1] == zone.name:
      ConPar.append(ele)
    elif (ele.memberOfZone[0] == zone.name and ele.memberOfZone[1] != "AMB") or (ele.memberOfZone[1] == zone.name and ele.memberOfZone[0] != "AMB"):
      SurBou.append(ele)
      if ele.memberOfZone[0] == zone.name:
        port = 'a'
      else:
        port = 'b'
      ConSurBou[zone.name].append((ele.name,port))
  %>
  Buildings.ThermalZones.Detailed.MixedAir ${zone.name}(
    redeclare package Medium = MediumA,
    AFlo=${zone.volume/(zone.height+0.000001)},
    hRoo=${zone.height},
    nConExt=${len(ConExt)+len(ConExtDoo)},
    % if len(ConExt) > 0:
    datConExt(
      layers={
    % for ele in ConExtDoo:
        matLayDoo,
    % endfor
    % for ele in ConExt:
        matLayExt${',' if not loop.last else '},'}
    % endfor
      A={
    % for ele in ConExtDoo:
        ${ele.width*ele.height},
    % endfor
    % for ele in ConExt:
        ${ele.width*ele.height-ele.AInnSur}${',' if not loop.last else '},'}
    % endfor
      til={
    % for ele in ConExtDoo:
        ${ele.angleDegTil*math.pi/180.0},
    % endfor
    % for ele in ConExt:
        ${ele.angleDegTil*math.pi/180.0}${',' if not loop.last else '},'}
    % endfor
      azi={
    % for ele in ConExtDoo:
        ${ele.angleDegAzi*math.pi/180.0},
    % endfor
    % for ele in ConExt:
        ${ele.angleDegAzi*math.pi/180.0}${',' if not loop.last else '}'}
    % endfor
    ),
    % endif
    nConExtWin=${len(ConExtWin)},
    % if len(ConExtWin) > 0:
    datConExtWin(
      layers={
    % for ele in ConExtWin:
        matLayExt${',' if not loop.last else '},'}
    % endfor
      A={
    % for ele in ConExtWin:
        ${ele.width*ele.height}${',' if not loop.last else '},'}
    % endfor
      glaSys={
    % for ele in ConExtWin:
        glaSys${',' if not loop.last else '},'}
    % endfor
      hWin={
    % for ele in ConExtWin:
        ${ele.includedWindows[0][1]}${',' if not loop.last else '},'}
    % endfor
      wWin={
    % for ele in ConExtWin:
        ${ele.includedWindows[0][0]}${',' if not loop.last else '},'}
    % endfor
      ove(wR={0},
      wL={0},
      gap={0.1},
      dep={1}),
      fFra={
      % for ele in ConExtWin:
      0.1${',' if not loop.last else '},'}
      % endfor
      til={
      % for ele in ConExtWin:
      ${ele.angleDegTil*math.pi/180.0}${',' if not loop.last else '},'}
      % endfor
      azi={
      % for ele in ConExtWin:
      ${ele.angleDegAzi*math.pi/180.0}${',' if not loop.last else '}'}
      % endfor
      ),
    % endif
    % if len(ConPar) > 0:
    nConPar=${len(ConPar)},
    datConPar(
      layers={matLayPar},
      each A=10,
      each til=Buildings.Types.Tilt.Wall),
    % else:
    nConPar=0,
    % endif
    % if len(ConBou) > 0:
    nConBou=${len(ConBou)},
    datConBou(
      layers={matLayFlo},
      each A=6*4,
      each til=Buildings.Types.Tilt.Floor,
      each stateAtSurface_a = false),
    % else:
    nConBou=0,
    % endif
    % if len(SurBou) > 0:
    nSurBou=${len(SurBou)+len(SurBouDoo)},
    surBou(
      A={
    % for ele in SurBouDoo:
        ${ele.width*ele.height},
    % endfor
    % for ele in SurBou:
        ${ele.width*ele.height-ele.AInnSur}${',' if not loop.last else '},'}
    % endfor
      til={
    % for ele in SurBouDoo:
        ${ele.angleDegTil*math.pi/180.0},
    % endfor
    % for ele in SurBou:
        ${ele.angleDegTil*math.pi/180.0}${',' if not loop.last else '},'}
    % endfor
      each absIR=0.9,
      each absSol=0.9),
    % else:
      nSurBou=0,
    % endif
    energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
    T_start=273.15+22,
    lat=0.73268921998722)
    "Room model"
    annotation (Placement(transformation(extent={{46,20},{86,60}})));
  % endfor
  <%
  SurBouDoo = []
  SurBou = []
  for zone in data['zones']:
    for ele in data['elementsDoor']:
      if ele.memberOfZone[0] == zone.name and ele.memberOfZone[1] != "AMB":
        SurBouDoo.append(ele)
    for ele in data['elementsOpaque']:
      if ele.memberOfZone[0] == zone.name and ele.memberOfZone[1] != "AMB":
        SurBou.append(ele)
  %>
  % if len(SurBouDoo) + len(SurBou) > 0:
  % for ele in SurBouDoo:
  Buildings.HeatTransfer.Conduction.MultiLayer ${ele.name}(
    A=${ele.width*ele.height},
    layers=matLayDoo,
    stateAtSurface_b=false)
    "Construction that is modeled outside of room"
    annotation (Placement(transformation(extent={{80,-20},{100,0}})));
  % endfor

  % for ele in SurBou:
  Buildings.HeatTransfer.Conduction.MultiLayer ${ele.name}(
    A=${ele.width*ele.height-ele.AInnSur},
    layers=matLayPar,
    stateAtSurface_b=false)
    "Construction that is modeled outside of room"
    annotation (Placement(transformation(extent={{80,-20},{100,0}})));
  % endfor
  % endif

  Modelica.Blocks.Sources.Constant qConGai_flow(k=0) "Convective heat gain"
    annotation (Placement(transformation(extent={{-60,40},{-40,60}})));

  Modelica.Blocks.Sources.Constant qRadGai_flow(k=0) "Radiative heat gain"
    annotation (Placement(transformation(extent={{-60,80},{-40,100}})));

  Modelica.Blocks.Routing.Multiplex3 multiplex3_1
    annotation (Placement(transformation(extent={{-20,40},{0,60}})));

  Modelica.Blocks.Sources.Constant qLatGai_flow(k=0) "Latent heat gain"
    annotation (Placement(transformation(extent={{-62,2},{-42,22}})));

  Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(
    filNam=Modelica.Utilities.Files.loadResource("modelica://Buildings/Resources/weatherdata/USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.mos"),
    computeWetBulbTemperature=false)
    annotation (Placement(transformation(extent={{160,140},{180,160}})));

  Modelica.Blocks.Sources.Constant uSha(k=0)
    "Control signal for the shading device"
    annotation (Placement(transformation(extent={{-20,90},{0,110}})));

  Modelica.Blocks.Routing.Replicator replicator(nout=max(1,${len(ConExtWin)}))
    annotation (Placement(transformation(extent={{10,90},{30,110}})));

equation
  connect(qRadGai_flow.y, multiplex3_1.u1[1])
    annotation (Line(points={{-39,90},{-32,90},{-32,57},{-22,57}},color={0,0,127},smooth=Smooth.None));

  connect(qConGai_flow.y, multiplex3_1.u2[1])
    annotation (Line(points={{-39,50},{-22,50}},color={0,0,127},smooth=Smooth.None));

  connect(qLatGai_flow.y, multiplex3_1.u3[1])
    annotation (Line(points={{-41,12},{-32,12},{-32,43},{-22,43}},color={0,0,127},smooth=Smooth.None));

  % if len(SurBouDoo) + len(SurBou) > 0:
  // connections between construction elements and thermal zones
  % for zone in data['zones']:
<% i = 1 %>\
  % for con in ConSurBouDoo[zone.name]:
  connect(${con[0]}.port_${con[1]}, ${zone.name}.surf_surBou[${i}])
    annotation (Line(points={{62.2,26},{62,26},{62,-10},{80,-10}}, color={191,0,0}));
<% i = i + 1 %>\
  % endfor
  % for con in ConSurBou[zone.name]:
  connect(${con[0]}.port_${con[1]}, ${zone.name}.surf_surBou[${i}])
    annotation (Line(points={{62.2,26},{62,26},{62,-10},{80,-10}}, color={191,0,0}));
<% i = i + 1 %>\
  % endfor
  % endfor
  % endif

  % for zone in data['zones']:
  connect(multiplex3_1.y, ${zone.name}.qGai_flow)
    annotation (Line(points={{1,50},{22,50},{22,48},{44.4,48}},color={0,0,127},smooth=Smooth.None));

  connect(weaDat.weaBus, ${zone.name}.weaBus)
    annotation (Line(points={{180,150},{190,150},{190,57.9},{83.9,57.9}},color={255,204,51},thickness=0.5,smooth=Smooth.None));

  connect(${zone.name}.uSha, replicator.y)
    annotation (Line(points={{44.4,58},{40,58},{40,100},{31,100}},color={0,0,127},smooth=Smooth.None));
  % endfor

  connect(uSha.y, replicator.u)
    annotation (Line(points={{1,100},{8,100}},color={0,0,127},smooth=Smooth.None));

  annotation(experiment(StartTime=0, StopTime=31536000, __Dymola_Algorithm="Dassl"),
    Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{200,200}})));
  end ${data['buildingSystem'].name}_BuildingsLib;
