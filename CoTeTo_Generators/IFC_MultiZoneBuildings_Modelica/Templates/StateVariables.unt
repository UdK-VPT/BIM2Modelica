<%
for filename in d:
  data = d[filename]['_buildingData']
%>\
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

[RequireComponent(typeof(MeshFilter))]

public class ${data['buildingSystem'].name}_StateVariables : MonoBehaviour
{
  private float time = 0.0F;
<% i = 1 %>\
  % for ele in data['elementsOpaque']:
  public GameObject surface${i};
  Mesh mesh${i};
  Vector3[] vertices${i};
  int[] triangles${i};<% i = i + 1 %>
  % endfor

  Color myColor1 = new Color(1, 0, 0, 0.3F);
  Color myColor2 = new Color(0, 0, 1, 0.3F);

  void Start() {
<% i = 1 %>\
% for ele in data['elementsOpaque']:
    // surface${i}
    surface${i} = new GameObject("surface${i}");
    surface${i}.AddComponent<MeshFilter>();
    surface${i}.AddComponent<MeshRenderer>();
    surface${i}.GetComponent<Renderer>().material = new Material(Shader.Find("Ciconia Studio/Double Sided/Transparent/Diffuse Bump"));
    surface${i}.GetComponent<Renderer>().material.SetFloat("_SpecIntensity",2.0f);
    surface${i}.GetComponent<Renderer>().material.SetFloat("_Transparency",0.8f);
    surface${i}.GetComponent<Renderer>().material.SetColor("_Speccolor",Color.Lerp(myColor1,myColor2,Random.Range(0.0f,1.0f)));
    mesh${i} = surface${i}.GetComponent<MeshFilter>().mesh;
    // vertices
    vertices${i} = new Vector3[${len(ele.meshSide1.vertices)}]{
  % for ver in ele.meshSide1.vertices:
      new Vector3(${ver[0]}f,${ver[2]}f,${ver[1]}f)${',' if not loop.last else ''}
  % endfor
    };
    // Triangles
    triangles${i} = new int[${len(ele.meshSide1.triangles)}]{
  % for j in range(0,int(len(ele.meshSide1.triangles)/3)):
      ${ele.meshSide1.triangles[3*j+0]},${ele.meshSide1.triangles[3*j+1]},${ele.meshSide1.triangles[3*j+2]}${',' if not loop.last else ''}
  % endfor
    };
    mesh${i}.Clear();
    mesh${i}.vertices = vertices${i};
    mesh${i}.triangles = triangles${i};<% i = i + 1 %>
% endfor
  }
<% i = 1 %>\
  void EnableSurfaces() {
    if (Input.GetKeyDown (KeyCode.E)) {
% for ele in data['elementsOpaque']:
      surface${i}.GetComponent<Renderer>().enabled = true;<% i = i + 1 %>
% endfor
    }
  }
<% i = 1 %>\
  void DisableSurfaces() {
    if (Input.GetKeyDown (KeyCode.D)) {
% for ele in data['elementsOpaque']:
      surface${i}.GetComponent<Renderer>().enabled = false;<% i = i + 1 %>
% endfor
    }
  }

  void Update() {
    time += 0.01F;

    EnableSurfaces();
    DisableSurfaces();
	}
}
